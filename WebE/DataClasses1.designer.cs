#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebE
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WebEvent")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCate(Cate instance);
    partial void UpdateCate(Cate instance);
    partial void DeleteCate(Cate instance);
    partial void InsertDt(Dt instance);
    partial void UpdateDt(Dt instance);
    partial void DeleteDt(Dt instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertCart(Cart instance);
    partial void UpdateCart(Cart instance);
    partial void DeleteCart(Cart instance);
    partial void InsertLogin(Login instance);
    partial void UpdateLogin(Login instance);
    partial void DeleteLogin(Login instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WebEventConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Cate> Cates
		{
			get
			{
				return this.GetTable<Cate>();
			}
		}
		
		public System.Data.Linq.Table<Dt> Dts
		{
			get
			{
				return this.GetTable<Dt>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<Cart> Carts
		{
			get
			{
				return this.GetTable<Cart>();
			}
		}
		
		public System.Data.Linq.Table<Login> Logins
		{
			get
			{
				return this.GetTable<Login>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cate")]
	public partial class Cate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCate;
		
		private string _Header;
		
		private string _Viewdetail;
		
		private EntitySet<Dt> _Dts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCateChanging(int value);
    partial void OnIdCateChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnViewdetailChanging(string value);
    partial void OnViewdetailChanged();
    #endregion
		
		public Cate()
		{
			this._Dts = new EntitySet<Dt>(new Action<Dt>(this.attach_Dts), new Action<Dt>(this.detach_Dts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCate", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdCate
		{
			get
			{
				return this._IdCate;
			}
			set
			{
				if ((this._IdCate != value))
				{
					this.OnIdCateChanging(value);
					this.SendPropertyChanging();
					this._IdCate = value;
					this.SendPropertyChanged("IdCate");
					this.OnIdCateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="VarChar(MAX)")]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Viewdetail", DbType="VarChar(MAX)")]
		public string Viewdetail
		{
			get
			{
				return this._Viewdetail;
			}
			set
			{
				if ((this._Viewdetail != value))
				{
					this.OnViewdetailChanging(value);
					this.SendPropertyChanging();
					this._Viewdetail = value;
					this.SendPropertyChanged("Viewdetail");
					this.OnViewdetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cate_Dt", Storage="_Dts", ThisKey="IdCate", OtherKey="idcat")]
		public EntitySet<Dt> Dts
		{
			get
			{
				return this._Dts;
			}
			set
			{
				this._Dts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dts(Dt entity)
		{
			this.SendPropertyChanging();
			entity.Cate = this;
		}
		
		private void detach_Dts(Dt entity)
		{
			this.SendPropertyChanging();
			entity.Cate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dt")]
	public partial class Dt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdEvent;
		
		private string _Tt;
		
		private string _Img;
		
		private string _Dt1;
		
		private string _Tt2;
		
		private string _Img2;
		
		private string _Dt2;
		
		private string _Tt3;
		
		private string _Img3;
		
		private string _Dt3;
		
		private string _Banner;
		
		private int _idcat;
		
		private EntitySet<Cart> _Carts;
		
		private EntityRef<Cate> _Cate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdEventChanging(int value);
    partial void OnIdEventChanged();
    partial void OnTtChanging(string value);
    partial void OnTtChanged();
    partial void OnImgChanging(string value);
    partial void OnImgChanged();
    partial void OnDt1Changing(string value);
    partial void OnDt1Changed();
    partial void OnTt2Changing(string value);
    partial void OnTt2Changed();
    partial void OnImg2Changing(string value);
    partial void OnImg2Changed();
    partial void OnDt2Changing(string value);
    partial void OnDt2Changed();
    partial void OnTt3Changing(string value);
    partial void OnTt3Changed();
    partial void OnImg3Changing(string value);
    partial void OnImg3Changed();
    partial void OnDt3Changing(string value);
    partial void OnDt3Changed();
    partial void OnBannerChanging(string value);
    partial void OnBannerChanged();
    partial void OnidcatChanging(int value);
    partial void OnidcatChanged();
    #endregion
		
		public Dt()
		{
			this._Carts = new EntitySet<Cart>(new Action<Cart>(this.attach_Carts), new Action<Cart>(this.detach_Carts));
			this._Cate = default(EntityRef<Cate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdEvent", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdEvent
		{
			get
			{
				return this._IdEvent;
			}
			set
			{
				if ((this._IdEvent != value))
				{
					this.OnIdEventChanging(value);
					this.SendPropertyChanging();
					this._IdEvent = value;
					this.SendPropertyChanged("IdEvent");
					this.OnIdEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tt", DbType="VarChar(MAX)")]
		public string Tt
		{
			get
			{
				return this._Tt;
			}
			set
			{
				if ((this._Tt != value))
				{
					this.OnTtChanging(value);
					this.SendPropertyChanging();
					this._Tt = value;
					this.SendPropertyChanged("Tt");
					this.OnTtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Img", DbType="VarChar(MAX)")]
		public string Img
		{
			get
			{
				return this._Img;
			}
			set
			{
				if ((this._Img != value))
				{
					this.OnImgChanging(value);
					this.SendPropertyChanging();
					this._Img = value;
					this.SendPropertyChanged("Img");
					this.OnImgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Dt", Storage="_Dt1", DbType="VarChar(MAX)")]
		public string Dt1
		{
			get
			{
				return this._Dt1;
			}
			set
			{
				if ((this._Dt1 != value))
				{
					this.OnDt1Changing(value);
					this.SendPropertyChanging();
					this._Dt1 = value;
					this.SendPropertyChanged("Dt1");
					this.OnDt1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tt2", DbType="VarChar(MAX)")]
		public string Tt2
		{
			get
			{
				return this._Tt2;
			}
			set
			{
				if ((this._Tt2 != value))
				{
					this.OnTt2Changing(value);
					this.SendPropertyChanging();
					this._Tt2 = value;
					this.SendPropertyChanged("Tt2");
					this.OnTt2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Img2", DbType="VarChar(MAX)")]
		public string Img2
		{
			get
			{
				return this._Img2;
			}
			set
			{
				if ((this._Img2 != value))
				{
					this.OnImg2Changing(value);
					this.SendPropertyChanging();
					this._Img2 = value;
					this.SendPropertyChanged("Img2");
					this.OnImg2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dt2", DbType="VarChar(MAX)")]
		public string Dt2
		{
			get
			{
				return this._Dt2;
			}
			set
			{
				if ((this._Dt2 != value))
				{
					this.OnDt2Changing(value);
					this.SendPropertyChanging();
					this._Dt2 = value;
					this.SendPropertyChanged("Dt2");
					this.OnDt2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tt3", DbType="VarChar(MAX)")]
		public string Tt3
		{
			get
			{
				return this._Tt3;
			}
			set
			{
				if ((this._Tt3 != value))
				{
					this.OnTt3Changing(value);
					this.SendPropertyChanging();
					this._Tt3 = value;
					this.SendPropertyChanged("Tt3");
					this.OnTt3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Img3", DbType="VarChar(MAX)")]
		public string Img3
		{
			get
			{
				return this._Img3;
			}
			set
			{
				if ((this._Img3 != value))
				{
					this.OnImg3Changing(value);
					this.SendPropertyChanging();
					this._Img3 = value;
					this.SendPropertyChanged("Img3");
					this.OnImg3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dt3", DbType="VarChar(MAX)")]
		public string Dt3
		{
			get
			{
				return this._Dt3;
			}
			set
			{
				if ((this._Dt3 != value))
				{
					this.OnDt3Changing(value);
					this.SendPropertyChanging();
					this._Dt3 = value;
					this.SendPropertyChanged("Dt3");
					this.OnDt3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Banner", DbType="VarChar(MAX)")]
		public string Banner
		{
			get
			{
				return this._Banner;
			}
			set
			{
				if ((this._Banner != value))
				{
					this.OnBannerChanging(value);
					this.SendPropertyChanging();
					this._Banner = value;
					this.SendPropertyChanged("Banner");
					this.OnBannerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idcat", DbType="Int NOT NULL")]
		public int idcat
		{
			get
			{
				return this._idcat;
			}
			set
			{
				if ((this._idcat != value))
				{
					if (this._Cate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidcatChanging(value);
					this.SendPropertyChanging();
					this._idcat = value;
					this.SendPropertyChanged("idcat");
					this.OnidcatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dt_Cart", Storage="_Carts", ThisKey="IdEvent", OtherKey="idEvent")]
		public EntitySet<Cart> Carts
		{
			get
			{
				return this._Carts;
			}
			set
			{
				this._Carts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cate_Dt", Storage="_Cate", ThisKey="idcat", OtherKey="IdCate", IsForeignKey=true)]
		public Cate Cate
		{
			get
			{
				return this._Cate.Entity;
			}
			set
			{
				Cate previousValue = this._Cate.Entity;
				if (((previousValue != value) 
							|| (this._Cate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cate.Entity = null;
						previousValue.Dts.Remove(this);
					}
					this._Cate.Entity = value;
					if ((value != null))
					{
						value.Dts.Add(this);
						this._idcat = value.IdCate;
					}
					else
					{
						this._idcat = default(int);
					}
					this.SendPropertyChanged("Cate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.Dt = this;
		}
		
		private void detach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.Dt = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tickets")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdTicket;
		
		private string _Header;
		
		private string _Date;
		
		private string _Location;
		
		private string _Price;
		
		private string _Quantity;
		
		private string _Img;
		
		private EntitySet<Cart> _Carts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTicketChanging(int value);
    partial void OnIdTicketChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnPriceChanging(string value);
    partial void OnPriceChanged();
    partial void OnQuantityChanging(string value);
    partial void OnQuantityChanged();
    partial void OnImgChanging(string value);
    partial void OnImgChanged();
    #endregion
		
		public Ticket()
		{
			this._Carts = new EntitySet<Cart>(new Action<Cart>(this.attach_Carts), new Action<Cart>(this.detach_Carts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTicket", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdTicket
		{
			get
			{
				return this._IdTicket;
			}
			set
			{
				if ((this._IdTicket != value))
				{
					this.OnIdTicketChanging(value);
					this.SendPropertyChanging();
					this._IdTicket = value;
					this.SendPropertyChanged("IdTicket");
					this.OnIdTicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(MAX)")]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(MAX)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(MAX)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="NVarChar(MAX)")]
		public string Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="NVarChar(MAX)")]
		public string Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Img", DbType="NVarChar(MAX)")]
		public string Img
		{
			get
			{
				return this._Img;
			}
			set
			{
				if ((this._Img != value))
				{
					this.OnImgChanging(value);
					this.SendPropertyChanging();
					this._Img = value;
					this.SendPropertyChanged("Img");
					this.OnImgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_Cart", Storage="_Carts", ThisKey="IdTicket", OtherKey="idTickets")]
		public EntitySet<Cart> Carts
		{
			get
			{
				return this._Carts;
			}
			set
			{
				this._Carts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = this;
		}
		
		private void detach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdAdmin;
		
		private string _admin1;
		
		private string _pass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdAdminChanging(int value);
    partial void OnIdAdminChanged();
    partial void Onadmin1Changing(string value);
    partial void Onadmin1Changed();
    partial void OnpassChanging(string value);
    partial void OnpassChanged();
    #endregion
		
		public Admin()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdAdmin", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdAdmin
		{
			get
			{
				return this._IdAdmin;
			}
			set
			{
				if ((this._IdAdmin != value))
				{
					this.OnIdAdminChanging(value);
					this.SendPropertyChanging();
					this._IdAdmin = value;
					this.SendPropertyChanged("IdAdmin");
					this.OnIdAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="admin", Storage="_admin1", DbType="NVarChar(MAX)")]
		public string admin1
		{
			get
			{
				return this._admin1;
			}
			set
			{
				if ((this._admin1 != value))
				{
					this.Onadmin1Changing(value);
					this.SendPropertyChanging();
					this._admin1 = value;
					this.SendPropertyChanged("admin1");
					this.Onadmin1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pass", DbType="NVarChar(MAX)")]
		public string pass
		{
			get
			{
				return this._pass;
			}
			set
			{
				if ((this._pass != value))
				{
					this.OnpassChanging(value);
					this.SendPropertyChanging();
					this._pass = value;
					this.SendPropertyChanged("pass");
					this.OnpassChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cart")]
	public partial class Cart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCart;
		
		private System.Nullable<int> _idTickets;
		
		private System.Nullable<int> _idEvent;
		
		private EntitySet<Login> _Logins;
		
		private EntityRef<Dt> _Dt;
		
		private EntityRef<Ticket> _Ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCartChanging(int value);
    partial void OnidCartChanged();
    partial void OnidTicketsChanging(System.Nullable<int> value);
    partial void OnidTicketsChanged();
    partial void OnidEventChanging(System.Nullable<int> value);
    partial void OnidEventChanged();
    #endregion
		
		public Cart()
		{
			this._Logins = new EntitySet<Login>(new Action<Login>(this.attach_Logins), new Action<Login>(this.detach_Logins));
			this._Dt = default(EntityRef<Dt>);
			this._Ticket = default(EntityRef<Ticket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCart", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int idCart
		{
			get
			{
				return this._idCart;
			}
			set
			{
				if ((this._idCart != value))
				{
					this.OnidCartChanging(value);
					this.SendPropertyChanging();
					this._idCart = value;
					this.SendPropertyChanged("idCart");
					this.OnidCartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTickets", DbType="Int")]
		public System.Nullable<int> idTickets
		{
			get
			{
				return this._idTickets;
			}
			set
			{
				if ((this._idTickets != value))
				{
					if (this._Ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidTicketsChanging(value);
					this.SendPropertyChanging();
					this._idTickets = value;
					this.SendPropertyChanged("idTickets");
					this.OnidTicketsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEvent", DbType="Int")]
		public System.Nullable<int> idEvent
		{
			get
			{
				return this._idEvent;
			}
			set
			{
				if ((this._idEvent != value))
				{
					if (this._Dt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEventChanging(value);
					this.SendPropertyChanging();
					this._idEvent = value;
					this.SendPropertyChanged("idEvent");
					this.OnidEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_Login", Storage="_Logins", ThisKey="idCart", OtherKey="IdCart")]
		public EntitySet<Login> Logins
		{
			get
			{
				return this._Logins;
			}
			set
			{
				this._Logins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dt_Cart", Storage="_Dt", ThisKey="idEvent", OtherKey="IdEvent", IsForeignKey=true)]
		public Dt Dt
		{
			get
			{
				return this._Dt.Entity;
			}
			set
			{
				Dt previousValue = this._Dt.Entity;
				if (((previousValue != value) 
							|| (this._Dt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dt.Entity = null;
						previousValue.Carts.Remove(this);
					}
					this._Dt.Entity = value;
					if ((value != null))
					{
						value.Carts.Add(this);
						this._idEvent = value.IdEvent;
					}
					else
					{
						this._idEvent = default(Nullable<int>);
					}
					this.SendPropertyChanged("Dt");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_Cart", Storage="_Ticket", ThisKey="idTickets", OtherKey="IdTicket", IsForeignKey=true)]
		public Ticket Ticket
		{
			get
			{
				return this._Ticket.Entity;
			}
			set
			{
				Ticket previousValue = this._Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket.Entity = null;
						previousValue.Carts.Remove(this);
					}
					this._Ticket.Entity = value;
					if ((value != null))
					{
						value.Carts.Add(this);
						this._idTickets = value.IdTicket;
					}
					else
					{
						this._idTickets = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logins(Login entity)
		{
			this.SendPropertyChanging();
			entity.Cart = this;
		}
		
		private void detach_Logins(Login entity)
		{
			this.SendPropertyChanging();
			entity.Cart = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Login")]
	public partial class Login : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _Password;
		
		private System.Nullable<int> _IdCart;
		
		private EntityRef<Cart> _Cart;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIdCartChanging(System.Nullable<int> value);
    partial void OnIdCartChanged();
    #endregion
		
		public Login()
		{
			this._Cart = default(EntityRef<Cart>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCart", DbType="Int")]
		public System.Nullable<int> IdCart
		{
			get
			{
				return this._IdCart;
			}
			set
			{
				if ((this._IdCart != value))
				{
					if (this._Cart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCartChanging(value);
					this.SendPropertyChanging();
					this._IdCart = value;
					this.SendPropertyChanged("IdCart");
					this.OnIdCartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_Login", Storage="_Cart", ThisKey="IdCart", OtherKey="idCart", IsForeignKey=true)]
		public Cart Cart
		{
			get
			{
				return this._Cart.Entity;
			}
			set
			{
				Cart previousValue = this._Cart.Entity;
				if (((previousValue != value) 
							|| (this._Cart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cart.Entity = null;
						previousValue.Logins.Remove(this);
					}
					this._Cart.Entity = value;
					if ((value != null))
					{
						value.Logins.Add(this);
						this._IdCart = value.idCart;
					}
					else
					{
						this._IdCart = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cart");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
